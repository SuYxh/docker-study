# 一、对常见代码内容要做到心中有数

- 模板
  - 模板代码
  - 条件判断
  - 数据循环
  - 组件调用
- 逻辑
  - 导入
  - 框架
  - 变量定义（data、props）
  - 接口请求、数据分发、数据处理、数据合并
  - 事件交互
  - 表单处理
  - 埋点
  - sdk
- 样式
  - 没啥特别的

# 二、提高质量

## 2.1 sentry常见错误

### 2.1.1 对象访问

1. 可选链
2. 不要相信任何接口约定
   1. 做好任何数据不存在的准备
      1. 安全提取数据
      2. 默认值
      3. 模板对应处理
   2. 做好数据格式不一致的准备
      1. 强制类型转换

### 2.1.2 DOM丢失

1. 先判断，后使用
2. 善用ref、querySelector、querySelectorAll

## 2.2 不相信任何约定

1. 不相信接口约定

2. 不相信函数入参约定

   ```javascript
   // bad case
   function add(a, b) {
     return a + b
   }
   // bad case
   function add(a, b) {
     if(typeof a === 'number' && typeof b === 'number') {
       return a + b
     }else {
       throw new Error('入参必须是数字')
     }
   }
   // good case
   function add(a, b) {
     a = parseInt(a)
     b = parseInt(b)
     
     if(!isNaN(a) && !isNaN(b)) {
       return a + b
     }else {
       throw new Error('入参必须是数字')
     }
   }
   // bad case
   function add(a, b) {
     a = Number(a)
     b = Number(b)
     
     if(!isNaN(a) && !isNaN(b)) {
       return a + b
     }else {
       throw new Error('入参必须是数字')
     }
   }  
   
   
   ```

   

3. 不相信返回值约定

```javascript
const a = 1
const b = 2
const ab = add(a, b)
// bad case
alert('数量是' + ab)
```



## 2.3 考虑边界

- 情况1，不要相信数据

```javasc
const list = [{}, {}, {}]
// bad case
function getData(key) {
	return list[key]
}
```

- 情况2，考虑数据边界

```javasc
// bad case
function calcTotalPrice(price, num) {
	return price * num
}
// good case
function calcTotalPrice(price, num) {
	if(price <= 0) return 0
	if(num <= 0) return 0
	return price * num
}
```

- 考虑null、undefined

```javascript
function calcTotalPrice(price, num) {
	if(price <= 0 || isNullOrUndefined(price)) return 0
	if(num <= 0 || isNullOrUndefined(num)) return 0
	return price * num
}
```

- 考虑空值

```javasc
// bad case
async function getData() {
	const res = await SomeModel.fetch({
		infoId
	})
}
// good case
async function getData() {
	if(!infoId) {
		Toast('err')
		return 
	}
	const res = await SomeModel.fetch({
		infoId
	})
}
```

### 如何考虑边界

- 不相信任何约定
- 假如你自己写test，如何能造成错误
- 方法应具备独立性，放到任何代码里无需修改都能用



## 2.4 错误处理

- 正确的try catch
  - Promise里的catch
  - 异步函数里的try catch
  - try catch的粒度&合理使用finally

```javas
// bad case
async function captureData() {
	//获取任务
	const task = await getTask()
	//准备抓取
	const captureTools = await new Capture()
	//抓取数据
	const data = captureTools.capture(task)
	//上报数据
	uploadData(data)
}
// bad case
async function captureData() {
	try {
		//获取任务
    const task = await getTask()
    //准备抓取
    const captureTools = await new Capture()
    //抓取数据
    const data = captureTools.capture(task)
    //上报数据
    uploadData(data)
	}catch(e) {
		
	}
}
```

- errorCaptured
- 适当的throw Error
  - 更细粒度的Error
  - 更多类型的Error
- 常见错误：https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Errors

## 2.5 时序问题

日常开发都是单线程的，几乎没有时序问题，但复杂场景需要考虑：

- 情况1：数据的时序
  - 依赖接口A&B，例如：快手插广告
- 情况2：空间的时序
  - 比如于iframe的交互，要考虑
    - 页面ready，iframe未ready时
    - 页面ready，iframe ready时
    - 页面未ready，iframe ready时
    - 上述情况再结合onload 与 真正ready
- 情况3：跨线程通信
  - 比如node多线程通信，参考：马良mac服务
  - 比如与webworker通信

## 2.6 不要容忍编辑器内出现波浪线

## 2.7 不要放过任何一个闪过的念头

## 2.8 编码以外的质量问题

### 1 过case，以及改动后对其他case的影响

核心思路：认真过case是值得做的事情

### 2 考虑接口的各种意外

- 501等错误码
- -2等“正常”的错误码
- 风控情况处理

核心思路：需要对转转后端架构有一定了解

### 3 考虑用户场景和体验

- 举例：搜索框清除按钮
- 举例：用户有什么其他操作路径
- 举例：用户重复点击处理
- 举例：操作区域过小

核心思路：尝试以QA视角或者以用户视角来测试自己的页面

### 4 考虑数据意外

- 举例：文字超长处理
- 举例：区域数据没有处理

核心思路：设计稿内容只是提供了60分水平，往往线上bug都是没有考虑到数据意外导致

### 5 考虑浏览器特性

- 举例：遮挡键盘情况
- 举例：横向滑动区域滚动条显示问题
- 举例：滚动穿透问题
- 举例：安卓文字遮挡、文字垂直居中问题

核心思路：经验+勤快一点，减少低级bug

### 6 考虑页面特殊机制

- 举例：下拉刷新处理
- 举例：分享处理
- 举例：未登录处理
- 举例：无数据处理
- 举例：返回刷新处理

核心思路：经验+勤快一点，让你的页面更高级



### 总结

善于总结每个需求出现的bug原因，是积累经验的最有效方法



### 进阶

如何让数据有问题的情况下，前端依然保持健壮性和可用性呢



# 三、提高效率

## 3.1 善用工具

- 不拒绝帮你节省时间的工具
- 手撸代码不是信仰，手撸类似代码更是价值低，把你的时间精力放在如何少撸代码上
- 可用工具：马良、beetle、zzui、future、npmjs等

### 3.2 精力管理

- 时间 !== 精力
- 摸透自己什么时间适合做什么事情
- 努力让自己的思考时间高过编码时间

### 3.3 以提高效率为挑战

- 开发需求等于一局游戏，花多长时间结束你可以决定
- 如果一个需求没有任何新的挑战，那就把时间作为挑战吧
- 尝试每做一个需求都产出新东西可以讲
- 实质上是自我迭代

### 3.4 盲写

- debug时间其实很长
- 尝试盲写模板、样式、逻辑
- 盲写成功程度取决于你对代码的熟练程度
- 不要让日常开发成为你的主要精力，日常代码犹如工厂

### 3.5 复盘

每个需求你都应该：

- 分析各个环节用时，看下次如何改进
- 分析bug构成，找解决方案
- 分析哪段代码是写的时候不爽的，看能否抽离和改进
- 分析用的不熟悉的语法，尽快找时间彻底吃透
- 冷静分析或找人review看代码设计的如何，迭代自己的编程思想

### 3.6 关键思维

- 凡是不舒服的地方都是痛点，无论大小，最可怕的是适应了痛点
- 任何已经成为习惯的代码（包括任何人提供的）都值得以颠覆性思维来重新审视
- 能通过每个需求自我成长的人，技术提升不会慢
- 舒适圈是技术生涯最大的陷阱



# 四、关于框架、类库、设计模式、原则、语言

## 4.1 框架

- 框架是这个时代的陷阱
- 熟练一个框架开发对于使用下一个框架没有任何帮助，再熟悉vue，写eggjs你也用不上
- 当你被下一个框架淘汰时，可能招呼都不会提前跟你打，例子太多了，如果你不用vite，可能你的下份工作会发现找不到webpack的身影了
- 框架的本质是约定和语法糖，再高端的玩法也不过是内部钩子和语法糖的组合
- 可以掌握框架的约定，可以关注框架的设计思想和原理，不要过渡迷信框架
- 框架代表了前端开发思想的迭代，看透背后思想的变迁也很重要，比如为什么最近都流行hook？
- 基于以上，不要让一个新框架成为你的阻碍，例如nestjs
- 我的判断：框架会越来越趋于编程的原始写法

## 4.2 类库

- 类库的本质是一段逻辑的封装
- 为什么你没有成为作者？每个类库都为了解决一个痛点，而你没有把痛点当痛点
- 类库比我们的代码好在哪里？需要自己去学习，通常都是作者比你考虑的更全面
- 做现阶段更有价值的类库作者，例如future中的一些方法
- 类库代码确实能锻炼你的编程水平
- 类库也具有时效性，适时审视自己的常用类库
- 用第三方还是自己写？需要考虑以下几个因素：
  - 自己需求与类库的匹配度
  - 类库的大与小，繁于简
  - 类库的质量，用之前去看一眼源码
  - 类库的重要性及你需要的维护力度、开放度
  - 如果自己写还达不到第三方的6成，那么要么考虑自己水平问题，要么考虑用第三方
  - 这个问题的本质是成本和收益
  - 如果你没怎么写过类库或者特别少，那你自己确实有问题

### 4.3 设计模式

- 设计模式的本质是针对特定场景的编程思想总结
- 设计模式这东西非常依赖场景，都学会了没有场景也是白搭
- 设计模式要学吗？一定要学，设计模式的背后是你没有用过的编程套路
- 不要迷信设计模式，多看看各种设计模式的案例，掌握在什么场景下用什么设计模式

### 4.4 原则

- 最知名的编程原则就是SOLID

  > https://www.cnblogs.com/klb561/p/16022462.html

- 原则很有用，因为能指导你日常编码

- 代码写的好不好，确实可以用SOLID的程度来评价

- 没有bug的代码并不是最好的，因为你放眼的只是现在，如果能为未来扩展和维护考虑，编程原则就是你必备的技能

- 为什么我要考虑未来，为什么我要考虑代码写的够不够好，我给你几个理由，上面都说过：
  
- 为什么我要考虑未来，为什么我要考虑代码写的够不够好，几个理由：
  
  - 舒适圈是最大的陷阱
  - 当你被淘汰的时候，你自己都不会提前意识到
  - 如果你想一辈子都在写页面，我也没办法
  
- 有空学习下函数式编程吧，你能更理解编程原则

### 4.5 语言

JavaScript只是编程世界里面的一门语言，而且还是个解释型的语言，这个世界还有很多语言

- 也许你用不上其他语言，也许你能用得上，未来会不会用Rust开发，谁能说的准呢
- 每种语言的出现都是为了解决一系列问题
- 不同语言的编码有很多不一样，也有很多是一样的，回顾下C语言可能会有收获
- 了解其他语言的好处是，你可以从更高的维度来看JavaScript，犹如外星人看地球
- 掌握其他语言的好处是，你多了一项生存技能和更能懂得编程的本质

### 排序

语言 > 原则 > 类库 > 框架 > 设计模式















